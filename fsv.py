import os
import signal
import sys
from typing import Dict, List, Optional, Tuple, Union


def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    sys.exit(0)


def load_exclusions(file_path: str = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                                                  "exceptions.txt")) -> Tuple[List[str], List[str], List[str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–ø–∫–∏, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
    exclude_dirs, exclude_extensions, exclude_files = [], [], []

    try:
        with open(file_path, 'r') as file:
            for line in file:
                entry = line.strip()
                if not entry:
                    continue

                if entry.startswith("*."):
                    exclude_extensions.append(entry[1:])
                elif entry.startswith(".") and "." not in entry[1:]:
                    exclude_dirs.append(entry)
                elif "." in entry:
                    exclude_files.append(entry)
                else:
                    exclude_dirs.append(entry)

    except FileNotFoundError:
        print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")

    print("\n\n–ò—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
    print("  - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞–ø–∫–∏:\n    ", exclude_dirs)
    print("  - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:\n    ", exclude_extensions)
    print("  - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã:\n    ", exclude_files)

    return exclude_dirs, exclude_extensions, exclude_files


def get_folder_structure(path: str,
                         depth: int = 0,
                         exclude_dirs: Optional[List[str]] = None,
                         exclude_extensions: Optional[List[str]] = None,
                         exclude_files: Optional[List[str]] = None) -> Tuple[Dict[str, Union[None, Dict]], int, int, int, int, int, int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""

    structure: Dict[str, Union[None, Dict]] = {}
    exclude_dirs = exclude_dirs or []
    exclude_extensions = exclude_extensions or []
    exclude_files = exclude_files or []

    total_dirs = 0
    total_files = 0
    hidden_dirs = 0
    hidden_files = 0
    empty_dirs = 0
    total_size = 0  # –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö

    try:
        with os.scandir(path) as entries:
            entries_list = list(entries)
            if not entries_list:
                empty_dirs += 1

            for entry in entries_list:
                name = entry.name

                if entry.is_dir():
                    total_dirs += 1
                    if name in exclude_dirs:
                        hidden_dirs += 1
                        continue

                    sub_structure, sub_dirs, sub_files, sub_hidden_dirs, sub_hidden_files, sub_empty_dirs, sub_size = get_folder_structure(
                        entry.path, depth + 1, exclude_dirs, exclude_extensions, exclude_files)
                    structure[name] = sub_structure
                    total_dirs += sub_dirs
                    total_files += sub_files
                    hidden_dirs += sub_hidden_dirs
                    hidden_files += sub_hidden_files
                    empty_dirs += sub_empty_dirs
                    total_size += sub_size
                else:
                    total_files += 1
                    try:
                        file_size = entry.stat().st_size
                        total_size += file_size
                    except (PermissionError, FileNotFoundError):
                        pass

                    if any(name.endswith(ext) for ext in exclude_extensions) or name in exclude_files:
                        hidden_files += 1
                    else:
                        structure[name] = None

    except PermissionError:
        structure['Permission Denied'] = None

    return structure, total_dirs, total_files, hidden_dirs, hidden_files, empty_dirs, total_size


def format_structure(structure: Dict[str, Union[None, Dict]], indent: int = 0, path: str = "") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""

    formatted = ""
    items = list(structure.items())
    folders = [(k, v) for k, v in items if isinstance(v, dict)]
    files = [(k, v) for k, v in items if not isinstance(v, dict)]

    for i, (key, value) in enumerate(folders):
        is_last = i == len(folders) - 1 and not files
        prefix = "‚îî‚îÄ‚îÄ‚îÄ" if is_last else "‚îú‚îÄ‚îÄ‚îÄ"

        current_path = os.path.join(path, key)

        if not value:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
            try:
                has_content = False
                with os.scandir(current_path) as entries:
                    for _ in entries:
                        has_content = True
                        break

                if has_content:
                    formatted += "‚îÇ   "*indent + f"{prefix}üìÅ {key} (üîí)\n"
                else:
                    formatted += "‚îÇ   "*indent + f"{prefix}üìÅ {key} (üå´Ô∏è)\n"
            except (PermissionError, FileNotFoundError):
                formatted += "‚îÇ   "*indent + f"{prefix}üìÅ {key} (üå´Ô∏è)\n"
        else:
            formatted += "‚îÇ   "*indent + f"{prefix}üìÅ {key}\n"
            next_indent_prefix = "    " if is_last else "‚îÇ   "
            sub_formatted = format_structure(value, indent + 1, current_path)

            # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—Ä–æ–≤–Ω–µ–π
            if is_last:
                lines = sub_formatted.split('\n')
                for j, line in enumerate(lines):
                    if line:
                        if j == len(lines) - 1 and not line.strip():
                            continue
                        formatted += "‚îÇ   "*indent + next_indent_prefix + line[indent*4 + 4:] + "\n"
            else:
                formatted += sub_formatted

    for i, (key, _) in enumerate(files):
        is_last = i == len(files) - 1
        prefix = "‚îî‚îÄ‚îÄ‚îÄ" if is_last else "‚îú‚îÄ‚îÄ‚îÄ"
        formatted += "‚îÇ   "*indent + f"{prefix}üìÑ {key}\n"

    return formatted


def validate_path(path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏"""
    if not path:
        print("–ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return False

    try:
        if not os.path.exists(path):
            print("–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏.")
            return False

        if not os.path.isdir(path):
            print("–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ.")
            return False

        if any(char in path for char in ['<', '>', '|', '*', '?', '"']):
            print("–ü—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (<, >, |, *, ?, \"). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—É—Ç—å.")
            return False

        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É—Ç–∏: {str(e)}")
        return False


def get_user_exclusions() -> Tuple[List[str], List[str], List[str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
    user_dirs = input("\n–í–≤–µ–¥–∏—Ç–µ –ø–∞–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").split(",")
    exclude_dirs = [dir.strip() for dir in user_dirs if dir.strip()]

    user_extensions = input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, *.py): ").split(",")
    exclude_extensions = [ext.strip()[1:] for ext in user_extensions if ext.strip().startswith("*.")]

    user_files = input("–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").split(",")
    exclude_files = [file.strip() for file in user_files if file.strip()]

    return exclude_dirs, exclude_extensions, exclude_files


def format_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes < 1024:
        return f"{size_bytes} –ë"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.2f} –ö–ë"
    elif size_bytes < 1024 * 1024 * 1024:
        return f"{size_bytes / (1024 * 1024):.2f} –ú–ë"
    else:
        return f"{size_bytes / (1024 * 1024 * 1024):.2f} –ì–ë"


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ CTRL+C
    signal.signal(signal.SIGINT, signal_handler)

    print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞–∂–º–∏—Ç–µ CTRL+C")

    while True:
        path = input("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ: ")
        if validate_path(path):
            break

    folder_name = path.split(os.sep)[-1] if path != "." else "."

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    exclude_dirs, exclude_extensions, exclude_files = load_exclusions()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    user_dirs, user_extensions, user_files = get_user_exclusions()
    exclude_dirs.extend(user_dirs)
    exclude_extensions.extend(user_extensions)
    exclude_files.extend(user_files)

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    print("\n\n–ò—Ç–æ–≥–æ–≤—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:")
    print("  - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞–ø–∫–∏:\n    ", exclude_dirs)
    print("  - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:\n    ", exclude_extensions)
    print("  - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã:\n    ", exclude_files)

    # –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    folder_structure, total_dirs, total_files, hidden_dirs, hidden_files, empty_dirs, total_size = get_folder_structure(
        path, exclude_dirs=exclude_dirs, exclude_extensions=exclude_extensions, exclude_files=exclude_files)

    if not folder_structure:
        print(f"\n–ü–∞–ø–∫–∞ üóÉÔ∏è '{folder_name}' –ø—É—Å—Ç–∞ –∏–ª–∏ –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–æ!")
    else:
        print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏:\n")
        print(f"üóÉÔ∏è {folder_name}")
        print(format_structure(folder_structure, path=path))

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"üìä –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {total_dirs} (—Å–∫—Ä—ã—Ç–æ: {hidden_dirs}/{total_dirs}, –ø—É—Å—Ç–æ: {empty_dirs}/{total_dirs})")
        print(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files} (—Å–∫—Ä—ã—Ç–æ: {hidden_files}/{total_files})")
        print(f"üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_dirs + total_files} (—Å–∫—Ä—ã—Ç–æ: {hidden_dirs + hidden_files}/{total_dirs + total_files})")
        print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {format_size(total_size)}")


if __name__ == "__main__":
    main()
